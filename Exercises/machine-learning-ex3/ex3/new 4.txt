mine
%Part 1

y_matrix = zeros(num_labels, m);

for i=1:num_labels,
    y_matrix(i,:) = (y==i);
endfor

a1 = [ones(m,1) X];
z2 = a1* Theta1' ;
a2 = [ones(size(z2, 1),1) sigmoid(z2)];
z3 = a2*Theta2' ;
a3 = a3 = sigmoid(z3);

J_unreg = 1/(m)*sum(sum(((-y_matrix'.*log(a3)-(1-y_matrix)'.*log(1-a3))))) ;

%Part 2
Theta1_reg = Theta1(: ,2: size(Theta1,2));
Theta2_reg = Theta2(: ,2: size(Theta2,2));
J_reg = (lambda/(2*m)) * (sum(sum( Theta1_reg.^2))+ sum(sum( Theta2_reg.^2)));

J = J_unreg + J_reg ;

% Part 3

% calculate sigmas
sigma3 = a3.-y_matrix;
sigma2 = (sigma3*Theta2).*sigmoidGradient([ones(size(z2, 1), 1) z2]);
sigma2 = sigma2(:, 2:end);

% accumulate gradients
delta_1 = (sigma2'*a1);
delta_2 = (sigma3'*a2);

% calculate regularized gradient
p1 = (lambda/m)*[zeros(size(Theta1, 1), 1) Theta1(:, 2:end)];
p2 = (lambda/m)*[zeros(size(Theta2, 1), 1) Theta2(:, 2:end)];
Theta1_grad = delta_1./m + p1;
Theta2_grad = delta_2./m + p2;
